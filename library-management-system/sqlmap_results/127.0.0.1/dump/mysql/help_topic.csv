help_topic_id,help_category_id,url,name,example,description
0,1,<blank>,HELP_DATE,<blank>,This help information was generated from the MySQL 9.1 Reference Manual\\non: 2024-09-13\\n
1,1,<blank>,HELP_VERSION,<blank>,This help information was generated from the MySQL 9.1 Reference Manual\\non: 2024-09-13 (revision: 79684)\\n\\nThis information applies to MySQL 9.1 through 9.1.0.\\n
2,2,https://dev.mysql.com/doc/refman/9.1/en/example-auto-increment.html,AUTO_INCREMENT,"CREATE TABLE animals (\\n     id MEDIUMINT NOT NULL AUTO_INCREMENT,\\n     name CHAR(30) NOT NULL,\\n     PRIMARY KEY (id)\\n);\\n\\nINSERT INTO animals (name) VALUES\\n    ('dog'),('cat'),('penguin'),\\n    ('lax'),('whale'),('ostrich');\\n\\nSELECT * FROM animals;\\n",The AUTO_INCREMENT attribute can be used to generate a unique identity\\nfor new rows:\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/example-auto-increment.html\\n\\n
3,3,https://dev.mysql.com/doc/refman/9.1/en/mysql-server-side-help.html,HELP COMMAND,<blank>,"Syntax:\\nmysql> help search_string\\n\\nIf you provide an argument to the help command, mysql uses it as a\\nsearch string to access server-side help from the contents of the MySQL\\nReference Manual. The proper operation of this command requires that\\nthe help tables in the mysql database be initialized with help topic\\ninformation (see\\nhttps://dev.mysql.com/doc/refman/9.1/en/server-side-help-support.html).\\n\\nIf there is no match for the search string, the search fails:\\n\\nmysql> help me\\n\\nNothing found\\nPlease try to run 'help contents' for a list of all accessible topics\\n\\nUse help contents to see a list of the help categories:\\n\\nmysql> help contents\\nYou asked for help about help category: ""Contents""\\nFor more information, type \\'help <item>\\', where <item> is one of the\\nfollowing categories:\\n   Account Management\\n   Administration\\n   Data Definition\\n   Data Manipulation\\n   Data Types\\n   Functions\\n   Functions and Modifiers for Use with GROUP BY\\n   Geographic Features\\n   Language Structure\\n   Plugins\\n   Storage Engines\\n   Stored Routines\\n   Table Maintenance\\n   Transactions\\n   Triggers\\n\\nIf the search string matches multiple items, mysql shows a list of\\nmatching topics:\\n\\nmysql> help logs\\nMany help items for your request exist.\\nTo make a more specific request, please type 'help <item>',\\nwhere <item> is one of the following topics:\\n   SHOW\\n   SHOW BINARY LOGS\\n   SHOW ENGINE\\n   SHOW LOGS\\n\\nUse a topic as the search string to see the help entry for that topic:\\n\\nmysql> help show binary logs\\nName: 'SHOW BINARY LOGS'\\nDescription:\\nSyntax:\\nSHOW BINARY LOGS\\n\\nLists the binary log files on the server. This statement is used as\\npart of the procedure described in [purge-binary-logs], that shows how\\nto determine which logs can be purged.\\n\\nmysql> SHOW BINARY LOGS;\\n+---------------+-----------+-----------+\\n| Log_name      | File_size | Encrypted |\\n+---------------+-----------+-----------+\\n| binlog.000015 |    724935 | Yes       |\\n| binlog.000016 |    733481 | Yes       |\\n+---------------+-----------+-----------+\\n\\nThe search string can contain the wildcard characters % and _. These\\nhave the same meaning as for pattern-matching operations performed with\\nthe LIKE operator. For example, HELP rep% returns a list of topics that\\nbegin with rep:\\n\\nmysql> HELP rep%\\nMany help items for your request exist.\\nTo make a more specific request, please type 'help <item>',\\nwhere <item> is one of the following\\ntopics:\\n   REPAIR TABLE\\n   REPEAT FUNCTION\\n   REPEAT LOOP\\n   REPLACE\\n   REPLACE FUNCTION\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/mysql-server-side-help.html\\n\\n"
4,5,https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html,ASYMMETRIC_DECRYPT,<blank>,"Syntax:\\nasymmetric_decrypt(algorithm, data_str, priv_key_str)\\n\\nDecrypts an encrypted string using the given algorithm and key string,\\nand returns the resulting plaintext as a binary string. If decryption\\nfails, the result is NULL.\\n\\nFor the legacy version of this function in use before MySQL 8.0.29, see\\nMySQL Enterprise Encryption Legacy Function Descriptions\\n(https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-function\\ns-legacy.html).\\n\\nBy default, the component_enterprise_encryption function assumes that\\nencrypted text uses the RSAES-OAEP padding scheme. The function\\nsupports decryption for content encrypted by the old openssl_udf shared\\nlibrary functions if the system variable\\nenterprise_encryption.rsa_support_legacy_padding is set to ON (the\\ndefault is OFF). When this is ON, the function also supports the\\nRSAES-PKCS1-v1_5 padding scheme, as used by the old openssl_udf shared\\nlibrary functions. When the variable is set to OFF, content encrypted\\nby the legacy functions cannot be decrypted, and the function returns\\nnull output for such content.\\n\\nalgorithm is the encryption algorithm used to create the key. The\\nsupported algorithm value is 'RSA'.\\n\\ndata_str is the encrypted string to decrypt, which was encrypted with\\nasymmetric_encrypt().\\n\\npriv_key_str is a valid PEM encoded RSA private key. For successful\\ndecryption, the key string must correspond to the public key string\\nused with asymmetric_encrypt() to produce the encrypted string. The\\nasymmetric_encrypt() component function only supports encryption using\\na public key, so decryption takes place with the corresponding private\\nkey.\\n\\nFor a usage example, see the description of asymmetric_encrypt().\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html\\n\\n"
5,5,https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html,ASYMMETRIC_ENCRYPT,"-- Generate private/public key pair\\nSET @priv = create_asymmetric_priv_key('RSA', 2048);\\nSET @pub = create_asymmetric_pub_key('RSA', @priv);\\n\\n-- Encrypt using public key, decrypt using private key\\nSET @ciphertext = asymmetric_encrypt('RSA', 'The quick brown fox', @pub);\\nSET @plaintext = asymmetric_decrypt('RSA', @ciphertext, @priv);\\n","Syntax:\\nasymmetric_encrypt(algorithm, data_str, pub_key_str)\\n\\nEncrypts a string using the given algorithm and key string, and returns\\nthe resulting ciphertext as a binary string. If encryption fails, the\\nresult is NULL.\\n\\nFor the legacy version of this function in use before MySQL 8.0.29, see\\nMySQL Enterprise Encryption Legacy Function Descriptions\\n(https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-function\\ns-legacy.html).\\n\\nalgorithm is the encryption algorithm used to create the key. The\\nsupported algorithm value is 'RSA'.\\n\\ndata_str is the string to encrypt. The length of this string cannot be\\ngreater than the key string length in bytes, minus 42 (to account for\\nthe padding).\\n\\npub_key_str is a valid PEM encoded RSA public key. The\\nasymmetric_encrypt() component function only supports encryption using\\na public key.\\n\\nTo recover the original unencrypted string, pass the encrypted string\\nto asymmetric_decrypt(), along with the other part of the key pair used\\nfor encryption, as in the following example:\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html\\n\\n"
6,5,https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html,ASYMMETRIC_SIGN,<blank>,"Syntax:\\nasymmetric_sign(algorithm, text, priv_key_str, digest_type)\\n\\nSigns a digest string or data string using a private key, and returns\\nthe signature as a binary string. If signing fails, the result is NULL.\\n\\nFor the legacy version of this function in use before MySQL 8.0.29, see\\nMySQL Enterprise Encryption Legacy Function Descriptions\\n(https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-function\\ns-legacy.html).\\n\\nalgorithm is the encryption algorithm used to create the key. The\\nsupported algorithm value is 'RSA'.\\n\\ntext is a data string or digest string. The function accepts digests\\nbut does not require them, as it is also capable of handling data\\nstrings of an arbitrary length. A digest string can be generated by\\ncalling create_digest().\\n\\npriv_key_str is the private key string to use for signing the digest\\nstring. It must be a valid PEM encoded RSA private key.\\n\\ndigest_type is the algorithm to be used to sign the data. The supported\\ndigest_type values are 'SHA224', 'SHA256', 'SHA384', and 'SHA512' when\\nOpenSSL 1.0.1 is in use. If OpenSSL 1.1.1 is in use, the additional\\ndigest_type values 'SHA3-224', 'SHA3-256', 'SHA3-384', and 'SHA3-512'\\nare available.\\n\\nFor a usage example, see the description of asymmetric_verify().\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html\\n\\n"
7,5,https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html,ASYMMETRIC_VERIFY,"-- Set the encryption algorithm and digest type\\nSET @algo = 'RSA';\\nSET @dig_type = 'SHA512';\\n\\n-- Create private/public key pair\\nSET @priv = create_asymmetric_priv_key(@algo, 2048);\\nSET @pub = create_asymmetric_pub_key(@algo, @priv);\\n\\n-- Generate digest from string\\nSET @dig = create_digest(@dig_type, 'The quick brown fox');\\n\\n-- Generate signature for digest and verify signature against digest\\nSET @sig = asymmetric_sign(@algo, @dig, @priv, @dig_type);\\nSET @verf = asymmetric_verify(@algo, @dig, @sig, @pub, @dig_type);\\n","Syntax:\\nasymmetric_verify(algorithm, text, sig_str, pub_key_str, digest_type)\\n\\nVerifies whether the signature string matches the digest string, and\\nreturns 1 or 0 to indicate whether verification succeeded or failed. If\\nverification fails, the result is NULL.\\n\\nBy default, the component_enterprise_encryption function assumes that\\nsignatures use the RSASSA-PSS signature scheme. The function supports\\nverification for signatures produced by the old openssl_udf shared\\nlibrary functions if the system variable\\nenterprise_encryption.rsa_support_legacy_padding is set to ON (the\\ndefault is OFF). When this is ON, the function also supports the\\nRSASSA-PKCS1-v1_5 signature scheme, as used by the old openssl_udf\\nshared library functions; when it is OFF, signatures produced by the\\nlegacy functions cannot be verified, and the function returns null\\noutput for such content.\\n\\nalgorithm is the encryption algorithm used to create the key. The\\nsupported algorithm value is 'RSA'.\\n\\ntext is a data string or digest string. The component function accepts\\ndigests but does not require them, as it is also capable of handling\\ndata strings of an arbitrary length. A digest string can be generated\\nby calling create_digest().\\n\\nsig_str is the signature string to be verified. A signature string can\\nbe generated by calling asymmetric_sign().\\n\\npub_key_str is the public key string of the signer. It corresponds to\\nthe private key passed to asymmetric_sign() to generate the signature\\nstring. It must be a valid PEM encoded RSA public key.\\n\\ndigest_type is the algorithm that was used to sign the data. The\\nsupported digest_type values are 'SHA224', 'SHA256', 'SHA384', and\\n'SHA512' when OpenSSL 1.0.1 is in use. If OpenSSL 1.1.1 is in use, the\\nadditional digest_type values 'SHA3-224', 'SHA3-256', 'SHA3-384', and\\n'SHA3-512' are available.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html\\n\\n"
8,5,https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html,CREATE_ASYMMETRIC_PRIV_KEY,"SET @priv = create_asymmetric_priv_key('RSA', 2048);\\nSET @pub = create_asymmetric_pub_key('RSA', @priv);\\n","Syntax:\\ncreate_asymmetric_priv_key(algorithm, key_length)\\n\\nCreates a private key using the given algorithm and key length, and\\nreturns the key as a binary string in PEM format. The key is in PKCS #8\\nformat. If key generation fails, the result is NULL.\\n\\nFor the legacy version of this function in use before MySQL 8.0.29, see\\nMySQL Enterprise Encryption Legacy Function Descriptions\\n(https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-function\\ns-legacy.html).\\n\\nalgorithm is the encryption algorithm used to create the key. The\\nsupported algorithm value is 'RSA'.\\n\\nkey_length is the key length in bits. If you exceed the maximum allowed\\nkey length or specify less than the minimum, key generation fails and\\nthe result is null output. The minimum allowed key length in bits is\\n2048. The maximum allowed key length is the value of the\\nenterprise_encryption.maximum_rsa_key_size system variable, which\\ndefaults to 4096. It has a maximum setting of 16384, which is the\\nmaximum key length allowed for the RSA algorithm. See\\nhttps://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-configuri\\nng.html.\\n\\n*Note*:\\n\\nGenerating longer keys can consume significant CPU resources. Limiting\\nthe key length using the enterprise_encryption.maximum_rsa_key_size\\nsystem variable lets you provide adequate security for your\\nrequirements while balancing this with resource usage.\\n\\nThis example creates a 2048-bit RSA private key, then derives a public\\nkey from the private key:\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html\\n\\n"
9,5,https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html,CREATE_ASYMMETRIC_PUB_KEY,<blank>,"Syntax:\\ncreate_asymmetric_pub_key(algorithm, priv_key_str)\\n\\nDerives a public key from the given private key using the given\\nalgorithm, and returns the key as a binary string in PEM format. The\\nkey is in PKCS #8 format. If key derivation fails, the result is NULL.\\n\\nFor the legacy version of this function in use before MySQL 8.0.29, see\\nMySQL Enterprise Encryption Legacy Function Descriptions\\n(https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-function\\ns-legacy.html).\\n\\nalgorithm is the encryption algorithm used to create the key. The\\nsupported algorithm value is 'RSA'.\\n\\npriv_key_str is a valid PEM encoded RSA private key.\\n\\nFor a usage example, see the description of\\ncreate_asymmetric_priv_key().\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html\\n\\n"
10,5,https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html,CREATE_DIGEST,"SET @dig = create_digest('SHA512', 'The quick brown fox');\\n","Syntax:\\ncreate_digest(digest_type, str)\\n\\nCreates a digest from the given string using the given digest type, and\\nreturns the digest as a binary string. If digest generation fails, the\\nresult is NULL.\\n\\nFor the legacy version of this function in use before MySQL 8.0.29, see\\nMySQL Enterprise Encryption Legacy Function Descriptions\\n(https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-function\\ns-legacy.html).\\n\\nThe resulting digest string is suitable for use with asymmetric_sign()\\nand asymmetric_verify(). The component versions of these functions\\naccept digests but do not require them, as they are capable of handling\\ndata of an arbitrary length.\\n\\ndigest_type is the digest algorithm to be used to generate the digest\\nstring. The supported digest_type values are 'SHA224', 'SHA256',\\n'SHA384', and 'SHA512' when OpenSSL 1.0.1 is in use. If OpenSSL 1.1.1\\nis in use, the additional digest_type values 'SHA3-224', 'SHA3-256',\\n'SHA3-384', and 'SHA3-512' are available.\\n\\nstr is the non-null data string for which the digest is to be\\ngenerated.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/enterprise-encryption-functions.html\\n\\n"
11,6,https://dev.mysql.com/doc/refman/9.1/en/boolean-literals.html,TRUE,<blank>,"The constants TRUE and FALSE evaluate to 1 and 0, respectively. The\\nconstant names can be written in any lettercase.\\n\\nmysql> SELECT TRUE, true, FALSE, false;\\n        -> 1, 1, 0, 0\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/boolean-literals.html\\n\\n"
12,6,https://dev.mysql.com/doc/refman/9.1/en/boolean-literals.html,FALSE,<blank>,"The constants TRUE and FALSE evaluate to 1 and 0, respectively. The\\nconstant names can be written in any lettercase.\\n\\nmysql> SELECT TRUE, true, FALSE, false;\\n        -> 1, 1, 0, 0\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/boolean-literals.html\\n\\n"
13,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,BIT,<blank>,"BIT[(M)]\\n\\nA bit-value type. M indicates the number of bits per value, from 1 to\\n64. The default is 1 if M is omitted.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n"
14,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,TINYINT,<blank>,TINYINT[(M)] [UNSIGNED] [ZEROFILL]\\n\\nA very small integer. The signed range is -128 to 127. The unsigned\\nrange is 0 to 255.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n
15,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,BOOLEAN,<blank>,"BOOL, BOOLEAN\\n\\nThese types are synonyms for TINYINT(1). A value of zero is considered\\nfalse. Nonzero values are considered true:\\n\\nmysql> SELECT IF(0, 'true', 'false');\\n+------------------------+\\n| IF(0, 'true', 'false') |\\n+------------------------+\\n| false                  |\\n+------------------------+\\n\\nmysql> SELECT IF(1, 'true', 'false');\\n+------------------------+\\n| IF(1, 'true', 'false') |\\n+------------------------+\\n| true                   |\\n+------------------------+\\n\\nmysql> SELECT IF(2, 'true', 'false');\\n+------------------------+\\n| IF(2, 'true', 'false') |\\n+------------------------+\\n| true                   |\\n+------------------------+\\n\\nHowever, the values TRUE and FALSE are merely aliases for 1 and 0,\\nrespectively, as shown here:\\n\\nmysql> SELECT IF(0 = FALSE, 'true', 'false');\\n+--------------------------------+\\n| IF(0 = FALSE, 'true', 'false') |\\n+--------------------------------+\\n| true                           |\\n+--------------------------------+\\n\\nmysql> SELECT IF(1 = TRUE, 'true', 'false');\\n+-------------------------------+\\n| IF(1 = TRUE, 'true', 'false') |\\n+-------------------------------+\\n| true                          |\\n+-------------------------------+\\n\\nmysql> SELECT IF(2 = TRUE, 'true', 'false');\\n+-------------------------------+\\n| IF(2 = TRUE, 'true', 'false') |\\n+-------------------------------+\\n| false                         |\\n+-------------------------------+\\n\\nmysql> SELECT IF(2 = FALSE, 'true', 'false');\\n+--------------------------------+\\n| IF(2 = FALSE, 'true', 'false') |\\n+--------------------------------+\\n| false                          |\\n+--------------------------------+\\n\\nThe last two statements display the results shown because 2 is equal to\\nneither 1 nor 0.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n"
16,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,SMALLINT,<blank>,SMALLINT[(M)] [UNSIGNED] [ZEROFILL]\\n\\nA small integer. The signed range is -32768 to 32767. The unsigned\\nrange is 0 to 65535.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n
17,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,MEDIUMINT,<blank>,MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]\\n\\nA medium-sized integer. The signed range is -8388608 to 8388607. The\\nunsigned range is 0 to 16777215.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n
18,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,INT,<blank>,INT[(M)] [UNSIGNED] [ZEROFILL]\\n\\nA normal-size integer. The signed range is -2147483648 to 2147483647.\\nThe unsigned range is 0 to 4294967295.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n
19,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,INTEGER,<blank>,INTEGER[(M)] [UNSIGNED] [ZEROFILL]\\n\\nThis type is a synonym for INT.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n
20,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,BIGINT,<blank>,BIGINT[(M)] [UNSIGNED] [ZEROFILL]\\n\\nA large integer. The signed range is -9223372036854775808 to\\n9223372036854775807. The unsigned range is 0 to 18446744073709551615.\\n\\nSERIAL is an alias for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n
21,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,DECIMAL,<blank>,"DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]\\n\\nA packed ""exact"" fixed-point number. M is the total number of digits\\n(the precision) and D is the number of digits after the decimal point\\n(the scale). The decimal point and (for negative numbers) the - sign\\nare not counted in M. If D is 0, values have no decimal point or\\nfractional part. The maximum number of digits (M) for DECIMAL is 65.\\nThe maximum number of supported decimals (D) is 30. If D is omitted,\\nthe default is 0. If M is omitted, the default is 10. (There is also a\\nlimit on how long the text of DECIMAL literals can be; see\\nhttps://dev.mysql.com/doc/refman/9.1/en/precision-math-expressions.html\\n.)\\n\\nUNSIGNED, if specified, disallows negative values. The UNSIGNED\\nattribute is deprecated for columns of type DECIMAL (and any synonyms);\\nyou should expect support for it to be removed in a future version of\\nMySQL. Consider using a simple CHECK constraint instead for such\\ncolumns.\\n\\nAll basic calculations (+, -, *, /) with DECIMAL columns are done with\\na precision of 65 digits.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n"
22,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,DEC,<blank>,"DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED]\\n[ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL]\\n\\nThese types are synonyms for DECIMAL. The FIXED synonym is available\\nfor compatibility with other database systems.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n"
23,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,FLOAT,<blank>,"FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]\\n\\nA small (single-precision) floating-point number. Permissible values\\nare -3.402823466E+38 to -1.175494351E-38, 0, and 1.175494351E-38 to\\n3.402823466E+38. These are the theoretical limits, based on the IEEE\\nstandard. The actual range might be slightly smaller depending on your\\nhardware or operating system.\\n\\nM is the total number of digits and D is the number of digits following\\nthe decimal point. If M and D are omitted, values are stored to the\\nlimits permitted by the hardware. A single-precision floating-point\\nnumber is accurate to approximately 7 decimal places.\\n\\nFLOAT(M,D) is a nonstandard MySQL extension. This syntax is deprecated,\\nand you should expect support for it to be removed in a future version\\nof MySQL.\\n\\nUNSIGNED, if specified, disallows negative values. The UNSIGNED\\nattribute is deprecated for columns of type FLOAT (and any synonyms)\\nand you should expect support for it to be removed in a future version\\nof MySQL. Consider using a simple CHECK constraint instead for such\\ncolumns.\\n\\nUsing FLOAT might give you some unexpected problems because all\\ncalculations in MySQL are done with double precision. See\\nhttps://dev.mysql.com/doc/refman/9.1/en/no-matching-rows.html.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n"
24,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,DOUBLE,<blank>,"DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]\\n\\nA normal-size (double-precision) floating-point number. Permissible\\nvalues are -1.7976931348623157E+308 to -2.2250738585072014E-308, 0, and\\n2.2250738585072014E-308 to 1.7976931348623157E+308. These are the\\ntheoretical limits, based on the IEEE standard. The actual range might\\nbe slightly smaller depending on your hardware or operating system.\\n\\nM is the total number of digits and D is the number of digits following\\nthe decimal point. If M and D are omitted, values are stored to the\\nlimits permitted by the hardware. A double-precision floating-point\\nnumber is accurate to approximately 15 decimal places.\\n\\nDOUBLE(M,D) is a nonstandard MySQL extension; and is deprecated. You\\nshould expect support for this syntax to be removed in a future version\\nof MySQL.\\n\\nUNSIGNED, if specified, disallows negative values. The UNSIGNED\\nattribute is deprecated for columns of type DOUBLE (and any synonyms)\\nand you should expect support for it to be removed in a future version\\nof MySQL. Consider using a simple CHECK constraint instead for such\\ncolumns.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n"
25,2,https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html,DOUBLE PRECISION,<blank>,"DOUBLE PRECISION[(M,D)] [UNSIGNED] [ZEROFILL], REAL[(M,D)] [UNSIGNED]\\n[ZEROFILL]\\n\\nThese types are synonyms for DOUBLE. Exception: If the REAL_AS_FLOAT\\nSQL mode is enabled, REAL is a synonym for FLOAT rather than DOUBLE.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/numeric-type-syntax.html\\n\\n"
26,2,https://dev.mysql.com/doc/refman/9.1/en/date-and-time-type-syntax.html,DATE,<blank>,"DATE\\n\\nA date. The supported range is '1000-01-01' to '9999-12-31'. MySQL\\ndisplays DATE values in 'YYYY-MM-DD' format, but permits assignment of\\nvalues to DATE columns using either strings or numbers.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/date-and-time-type-syntax.html\\n\\n"
27,2,https://dev.mysql.com/doc/refman/9.1/en/date-and-time-type-syntax.html,DATETIME,<blank>,"DATETIME[(fsp)]\\n\\nA date and time combination. The supported range is '1000-01-01\\n00:00:00.000000' to '9999-12-31 23:59:59.499999'. MySQL displays\\nDATETIME values in 'YYYY-MM-DD hh:mm:ss[.fraction]' format, but permits\\nassignment of values to DATETIME columns using either strings or\\nnumbers.\\n\\nAn optional fsp value in the range from 0 to 6 may be given to specify\\nfractional seconds precision. A value of 0 signifies that there is no\\nfractional part. If omitted, the default precision is 0.\\n\\nAutomatic initialization and updating to the current date and time for\\nDATETIME columns can be specified using DEFAULT and ON UPDATE column\\ndefinition clauses, as described in\\nhttps://dev.mysql.com/doc/refman/9.1/en/timestamp-initialization.html.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/date-and-time-type-syntax.html\\n\\n"
28,2,https://dev.mysql.com/doc/refman/9.1/en/date-and-time-type-syntax.html,TIMESTAMP,<blank>,"TIMESTAMP[(fsp)]\\n\\nA timestamp. The range is '1970-01-01 00:00:01.000000' UTC to\\n'2038-01-19 03:14:07.499999' UTC. TIMESTAMP values are stored as the\\nnumber of seconds since the epoch ('1970-01-01 00:00:00' UTC). A\\nTIMESTAMP cannot represent the value '1970-01-01 00:00:00' because that\\nis equivalent to 0 seconds from the epoch and the value 0 is reserved\\nfor representing '0000-00-00 00:00:00\\', the ""zero"" TIMESTAMP value.\\n\\nAn optional fsp value in the range from 0 to 6 may be given to specify\\nfractional seconds precision. A value of 0 signifies that there is no\\nfractional part. If omitted, the default precision is 0.\\n\\nThe way the server handles TIMESTAMP definitions depends on the value\\nof the explicit_defaults_for_timestamp system variable (see\\nhttps://dev.mysql.com/doc/refman/9.1/en/server-system-variables.html).\\n\\nIf explicit_defaults_for_timestamp is enabled, there is no automatic\\nassignment of the DEFAULT CURRENT_TIMESTAMP or ON UPDATE\\nCURRENT_TIMESTAMP attributes to any TIMESTAMP column. They must be\\nincluded explicitly in the column definition. Also, any TIMESTAMP not\\nexplicitly declared as NOT NULL permits NULL values.\\n\\nIf explicit_defaults_for_timestamp is disabled, the server handles\\nTIMESTAMP as follows:\\n\\nUnless specified otherwise, the first TIMESTAMP column in a table is\\ndefined to be automatically set to the date and time of the most recent\\nmodification if not explicitly assigned a value. This makes TIMESTAMP\\nuseful for recording the timestamp of an INSERT or UPDATE operation.\\nYou can also set any TIMESTAMP column to the current date and time by\\nassigning it a NULL value, unless it has been defined with the NULL\\nattribute to permit NULL values.\\n\\nAutomatic initialization and updating to the current date and time can\\nbe specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE\\nCURRENT_TIMESTAMP column definition clauses. By default, the first\\nTIMESTAMP column has these properties, as previously noted. However,\\nany TIMESTAMP column in a table can be defined to have these\\nproperties.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/date-and-time-type-syntax.html\\n\\n"
29,2,https://dev.mysql.com/doc/refman/9.1/en/date-and-time-type-syntax.html,TIME,<blank>,"TIME[(fsp)]\\n\\nA time. The range is '-838:59:59.000000' to '838:59:59.000000'. MySQL\\ndisplays TIME values in 'hh:mm:ss[.fraction]' format, but permits\\nassignment of values to TIME columns using either strings or numbers.\\n\\nAn optional fsp value in the range from 0 to 6 may be given to specify\\nfractional seconds precision. A value of 0 signifies that there is no\\nfractional part. If omitted, the default precision is 0.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/date-and-time-type-syntax.html\\n\\n"
30,2,https://dev.mysql.com/doc/refman/9.1/en/date-and-time-type-syntax.html,YEAR DATA TYPE,<blank>,"YEAR[(4)]\\n\\nA year in 4-digit format. MySQL displays YEAR values in YYYY format,\\nbut permits assignment of values to YEAR columns using either strings\\nor numbers. Values display as 1901 to 2155, or 0000.\\n\\nFor additional information about YEAR display format and interpretation\\nof input values, see https://dev.mysql.com/doc/refman/9.1/en/year.html.\\n\\n*Note*:\\n\\nThe YEAR(4) data type with an explicit display width is deprecated; you\\nshould expect support for it to be removed in a future version of\\nMySQL. Instead, use YEAR without a display width, which has the same\\nmeaning.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/date-and-time-type-syntax.html\\n\\n"
31,2,https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html,CHAR,<blank>,"[NATIONAL] CHAR[(M)] [CHARACTER SET charset_name] [COLLATE\\ncollation_name]\\n\\nA fixed-length string that is always right-padded with spaces to the\\nspecified length when stored. M represents the column length in\\ncharacters. The range of M is 0 to 255. If M is omitted, the length is\\n1.\\n\\n*Note*:\\n\\nTrailing spaces are removed when CHAR values are retrieved unless the\\nPAD_CHAR_TO_FULL_LENGTH SQL mode is enabled.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html\\n\\n"
32,2,https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html,CHAR BYTE,<blank>,The CHAR BYTE data type is an alias for the BINARY data type. This is a\\ncompatibility feature.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html\\n\\n
33,2,https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html,VARCHAR,<blank>,"[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE\\ncollation_name]\\n\\nA variable-length string. M represents the maximum column length in\\ncharacters. The range of M is 0 to 65,535. The effective maximum length\\nof a VARCHAR is subject to the maximum row size (65,535 bytes, which is\\nshared among all columns) and the character set used. For example,\\nutf8mb3 characters can require up to three bytes per character, so a\\nVARCHAR column that uses the utf8mb3 character set can be declared to\\nbe a maximum of 21,844 characters. See\\nhttps://dev.mysql.com/doc/refman/9.1/en/column-count-limit.html.\\n\\nMySQL stores VARCHAR values as a 1-byte or 2-byte length prefix plus\\ndata. The length prefix indicates the number of bytes in the value. A\\nVARCHAR column uses one length byte if values require no more than 255\\nbytes, two length bytes if values may require more than 255 bytes.\\n\\n*Note*:\\n\\nMySQL follows the standard SQL specification, and does not remove\\ntrailing spaces from VARCHAR values.\\n\\nVARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR is the\\nstandard SQL way to define that a VARCHAR column should use some\\npredefined character set. MySQL uses utf8mb3 as this predefined\\ncharacter set.\\nhttps://dev.mysql.com/doc/refman/9.1/en/charset-national.html. NVARCHAR\\nis shorthand for NATIONAL VARCHAR.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html\\n\\n"
34,2,https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html,BINARY,<blank>,"BINARY[(M)]\\n\\nThe BINARY type is similar to the CHAR type, but stores binary byte\\nstrings rather than nonbinary character strings. An optional length M\\nrepresents the column length in bytes. If omitted, M defaults to 1.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html\\n\\n"
35,2,https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html,VARBINARY,<blank>,"VARBINARY(M)\\n\\nThe VARBINARY type is similar to the VARCHAR type, but stores binary\\nbyte strings rather than nonbinary character strings. M represents the\\nmaximum column length in bytes.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html\\n\\n"
36,2,https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html,TINYBLOB,<blank>,TINYBLOB\\n\\nA BLOB column with a maximum length of 255 (28 − 1) bytes. Each\\nTINYBLOB value is stored using a 1-byte length prefix that indicates\\nthe number of bytes in the value.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html\\n\\n
37,2,https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html,TINYTEXT,<blank>,TINYTEXT [CHARACTER SET charset_name] [COLLATE collation_name]\\n\\nA TEXT column with a maximum length of 255 (28 − 1) characters. The\\neffective maximum length is less if the value contains multibyte\\ncharacters. Each TINYTEXT value is stored using a 1-byte length prefix\\nthat indicates the number of bytes in the value.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html\\n\\n
38,2,https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html,BLOB,<blank>,"BLOB[(M)]\\n\\nA BLOB column with a maximum length of 65,535 (216 − 1) bytes. Each\\nBLOB value is stored using a 2-byte length prefix that indicates the\\nnumber of bytes in the value.\\n\\nAn optional length M can be given for this type. If this is done, MySQL\\ncreates the column as the smallest BLOB type large enough to hold\\nvalues M bytes long.\\n\\nURL: https://dev.mysql.com/doc/refman/9.1/en/string-type-syntax.html\\n\\n"
39,2,